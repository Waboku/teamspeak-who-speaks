%Generate Bitmaps

clearvars;

%path to the PNG's that are read, relative to the git root 
assetsPath = '\Tools\Assets';

%path to the output for the image.h files, relative to the git root
bitmapPath = '\include\bitmaps';




%script that shouldnt have to be edited
gitPath = strrep(pwd,'\Tools','');

bitmapPath = [gitPath bitmapPath];
assetsPath = [gitPath assetsPath];

list = dir([assetsPath '\*.png' ]);

includeFileID = fopen([bitmapPath '\all_bitmaps.h'],'w');
fprintf(includeFileID,'/*\n');
fprintf(includeFileID,' * bitmaps.h\n');
fprintf(includeFileID,' *\n');
fprintf(includeFileID,' *Generated by Matlab using the scripts in the Tools Folder\n');
fprintf(includeFileID,' */ \n');
fprintf(includeFileID,'\n');
fprintf(includeFileID,'\n');
fprintf(includeFileID,'\t//Provides an easy way to include all bitmaps\n');
fprintf(includeFileID,'\n');
fprintf(includeFileID,'\n');
fprintf(includeFileID,'#ifndef BITMAPS_H_\n');
fprintf(includeFileID,'#define BITMAPS_H_\n');
fprintf(includeFileID,'\n');
fprintf(includeFileID,'\n');


for fileCount = 1:length(list)
   
    clear imgData 

    [imgData] = imread([assetsPath '\' list(fileCount).name]);

    [y, x, c] = size(imgData);

    filename = strrep(list(fileCount).name(1:end-4),' ', '_');

    bitmapFileID = fopen([bitmapPath '\' filename '.h'],'w');

    fprintf(bitmapFileID,'/*\n');
    fprintf(bitmapFileID,[' * ' filename '.h\n']);
    fprintf(bitmapFileID,' *\n');
    fprintf(bitmapFileID,' *Generated by matlab\n');
    fprintf(bitmapFileID,' */ \n');
    fprintf(bitmapFileID,'\n');
    fprintf(bitmapFileID,'\n');
    fprintf(bitmapFileID,['#ifndef ' upper(filename) '_H_\n']);
    fprintf(bitmapFileID,['#define ' upper(filename) '_H_\n']);
    fprintf(bitmapFileID,'\n');
    fprintf(bitmapFileID,'\n');
    fprintf(bitmapFileID,'\n');
    fprintf(bitmapFileID,['//Image: ' filename '   size: ' num2str(x) 'x' num2str(y) ' pixels \n']);
    fprintf(bitmapFileID, ['\nconst RGBcolor_t ' filename '_data[' num2str(y*x) '];\n']);
    fprintf(bitmapFileID,'\n');
    fprintf(bitmapFileID,['const bitmap_t ' filename ' = {.xSize = ' num2str(x) ', .ySize = ' num2str(y) ', .data = ' filename '_data};']);
    fprintf(bitmapFileID,'\n');
    fprintf(bitmapFileID,'\n');
    fprintf(bitmapFileID, '/*The image data encoded in RGBcolor_t*/');
    fprintf(bitmapFileID, ['\nconst RGBcolor_t ' filename '_data[' num2str(y*x) '] = {\t\n']);


    for yc = 1:y
      for xc = 1:x
        fprintf(bitmapFileID, '\t\t\t{ .red = ');      
        fprintf(bitmapFileID, num2str(imgData(yc,xc,1),'0x%02x'));
        fprintf(bitmapFileID, ', .green = ');      
        fprintf(bitmapFileID, num2str(imgData(yc,xc,2),'0x%02x'));
        fprintf(bitmapFileID, ', .blue = ');    
        fprintf(bitmapFileID, num2str(imgData(yc,xc,3),'0x%02x'));
        fprintf(bitmapFileID, '}, \n');
      end
      fprintf(bitmapFileID,'\n');
    end

    fprintf(bitmapFileID,'};\n\n\n');
    fprintf(bitmapFileID,'\n\n\n');
    fprintf(bitmapFileID,['#endif /*' upper(filename) '_H_*/']);
    
    fprintf(includeFileID,['#include "' filename '.h"\n']);

    fclose(bitmapFileID);

end

 fprintf(includeFileID,'\n\n#endif /*BITMAPS_H_*/');
 fclose(includeFileID);
