%Generate font in a C readable format for easy integration into a embedded
%project that requires small font redering implementations

%The parameters you should edit
font = 'Comic Sans';
size = 14;
bold = false;
space_width = 5;


%path to the output for the image.h files, relative to the git root
fontPath = '\Fonts';




%The rest you porbabbly shouldnt edit
gitPath = strrep(pwd,'\Tools','');

fontPath = [gitPath fontPath];

if(bold)
   font = [font ' Bold']; 
end


charset = '!"#$%&''()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmnopqrstuvwxyz{|}~'; %ASCII characters in order
font_name = font;


bmp =  BitmapFont(font,size,charset,bold);
height = 1;
lowth = 40;


for i = 1:length(charset) %finds the highest and losest point of all the characters combined
    for j = 1:40
       if(~all(bmp.Bitmaps{i}(j,:)==0))
           if j > height
               height = j;
           end 
           if j < lowth
               lowth = j;
           end 
       end
    end
end

height = height - lowth;

font = strrep(font,' ', '_');

%open The file we write to
fileID = fopen([fontPath '/' font '.h'],'w');


fprintf(fileID,'/*\n');
fprintf(fileID,[' * ' font '.h\n']);
fprintf(fileID,' *\n');
fprintf(fileID,' *Generated by matlab using the scripts in the Tools folder\n');
fprintf(fileID,' */ \n');
fprintf(fileID,'\n');
fprintf(fileID,'\n');
fprintf(fileID,['#ifndef ' upper(font) '_H_\n']);
fprintf(fileID,['#define ' upper(font) '_H_\n']);
fprintf(fileID,'\n');
fprintf(fileID,'\n');
fprintf(fileID,'#include "../text.h"\n');
fprintf(fileID,'\n');
fprintf(fileID,['//This font is ' font_name ' size ' num2str(size) '\n']);
fprintf(fileID,'\n');
fprintf(fileID,['static const uint8_t fontName[] = "' font_name '";\n']);
fprintf(fileID,['static const uint8_t fontWidth[' num2str(length(charset)+1) '];\n']);
fprintf(fileID,['static const uint16_t fontData['  num2str((length(charset)+1)*(height+1)) '];\n']);
fprintf(fileID,'\n');
fprintf(fileID,['const font_t ' lower(font) ' = {.name = fontName, .charWidth = fontWidth, .charData = fontData, .height = ' num2str(height+1) ', .totalCharAmount = ' num2str(length(charset)+1) '};\n']);
fprintf(fileID,'\n');
fprintf(fileID,'\n');

fprintf(fileID, ['static const uint8_t fontWidth[' num2str(length(charset)+1) '] =\t{']);
fprintf(fileID,[ num2str(space_width) ', ']);
for char = 1:length(charset)
    [x,y] = find(bmp.Bitmaps{char}(:,:) == 1);
    
    start = min(y);
    stop = max(y)+2;    
    width = stop - start;
   fprintf(fileID,[ num2str(width) ', ' ]);    
end
fprintf(fileID, '};\n\n');
fprintf(fileID,'\n');
fprintf(fileID, '/* the actual system font, sorted in ASCII, the comment near every sub-array specifies the character*/');
fprintf(fileID, ['\nstatic const uint16_t fontData[' num2str((length(charset)+1)*(height+1)) '] = \t\n']);
fprintf(fileID, '\t{\t');

for i = lowth:height+lowth
      fprintf(fileID,'0x0000, ');
end
fprintf(fileID,[ '\t\t//'' ''\n']);


for char = 1:length(charset)
    fprintf(fileID, '\t\t');   
     
    [x,y] = find(bmp.Bitmaps{char}(:,:) == 1);
    
    start = min(y);
    stop = max(y)+2;    
    width = stop - start;
    %width = length(bmp.Bitmaps{char}(1,:));
    char_data = uint16(zeros(height+lowth+1,1));
    for i = lowth:height+lowth
        k = 1;   
        for j = start:stop+1
            k = k + 1;
            if bmp.Bitmaps{char}(i,j) == 1
                char_data(i) = bitset(char_data(i),width+1-k);
            end
        end
        fprintf(fileID,[ num2str(char_data(i),'0x%04x') ', ']);
    end
    fprintf(fileID, '\t\t//''' );   
    fprintf(fileID,'%s', charset(char));
    fprintf(fileID, '''\n');
end
fprintf(fileID,'};\n\n\n');

fprintf(fileID,['#endif /*' upper(font) '_H_*/']);

fclose(fileID);
